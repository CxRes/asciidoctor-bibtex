#!/usr/bin/env ruby

# Executable for asciidoctor-bib
#
# Uses asciidoctor preprocessor extension to include citations and bibliography
# in a single pass.
#
# Copyright (c) Peter Lane, 2013.
# Released under Open Works License, 0.9.2

require 'asciidoc-bib'
require 'asciidoctor'
require 'asciidoctor/extensions'
require 'optparse'

include AsciidocBib

def AsciidocBibExtension filename
  Class.new(Asciidoctor::Extensions::Preprocessor) do
    @@filename = filename  # TODO: Replace this with something without warnings

    def process reader, lines
      return reader if lines.empty?

      biblio = read_bibliography @@filename
      cites_used = []

      # -- extract cites

      lines.each do |line|
        cites_used += extract_cites(line)
      end

      # -- sort cites

      cites_used = cites_used.sort_by do |ref|
        unless biblio[ref].nil?
          # extract the reference, and uppercase. 
          # Remove { } from grouped names for sorting.
          author = biblio[ref].author
          if author.nil?
            author = biblio[ref].editor
          end
          author_chicago(author).collect {|s| s.upcase.gsub("{","").gsub("}","")} + [biblio[ref].year]
        else 
          [ref]
        end
      end

      # -- replace cites with correct text

      lines.each do |line|
        md = CITATION_FULL.match(line)
        while md
          cite_refs, cite_pages = extract_refs_pages md[4]

          # replace text on line
          line.gsub!(md[0],
                     get_citation(biblio, md[1], md[3], 
                                  cite_refs, cite_pages, 
                                  false, cites_used, 'apa'))
          # look for next citation on line
          md = CITATION_FULL.match(md.post_match)
        end
      end

      # -- add in bibliography

      biblio_index = lines.index "[bibliography]\n"
      lines.delete_at biblio_index
      cites_used.reverse.each do |ref|
        lines.insert biblio_index, "\n"
        lines.insert biblio_index, "[[#{ref}]]" + get_reference(biblio, ref, false, 'apa') + "\n"
      end

      return Asciidoctor::Reader.new lines
    end
  end
end

Asciidoctor::Extensions.register do |document|
  preprocessor AsciidocBibExtension('biblio.bib')
end

# TODO: Manage other asciidoctor options?
Asciidoctor.render_file ARGV[0], :safe => :safe, :in_place => true

